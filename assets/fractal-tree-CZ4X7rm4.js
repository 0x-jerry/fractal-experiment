import{c as _,u as w,a as F,_ as v}from"./useCanvasRunner-BtSyTrXL.js";import{c as C}from"./utils-DWuipzrQ.js";import{R as X}from"./pseudorandom-9FEvop_2.js";import{d as h}from"./angle-CPSFGmFf.js";import"./vec2-ikhXc4Ii.js";import{d as k,o as x,c as A,w as S,a as T,u as V}from"./index-B1bq4_oz.js";function R({axiom:e,rules:a,actions:l,iterCount:f}){return{create:s,get:p};async function*s(t){let n=e.split("").map(o=>({type:o,iteration:0}));const r=_(f||100,100,1e3);let c=r;for(;n.length;){let o=function(){return d(i.type)};c--<0&&(yield,c=r);const i=n.shift();if(i.iteration===t){await o();continue}const u=a[i.type],m=[];if(!u){await o();continue}const y=u.split("");for(const g of y)m.push({type:g,iteration:i.iteration+1});n=m.concat(n)}}function p(t){let n=e.split("");for(let r=0;r<t;r++){const c=[];for(const o of n){const i=a[o],u=i?i.split(""):[o];c.push(...u)}n=c}return n}async function d(t){const n=l[t];if(n)try{await n()}catch(r){console.warn(t,r)}}}const{cos:B,sin:G}=Math;function b(e,a){const{width:l,height:f}=e.canvas,s=X(),d=[{x:l*(1/4),y:f,deg:-90+a.startAngle,len:a.length,opacity:255}];let t=d.pop();return R({iterCount:200,axiom:"X",rules:{X:"F-[[X]+X]+F[+FX]-X",F:"FF"},actions:{F(){if(!t)return;const{x:r,y:c,len:o,opacity:i}=t;t.deg+=s(-5,5);const u=t.deg;e.strokeStyle=a.color,e.globalAlpha=i/255,e.lineWidth=2,e.beginPath(),e.moveTo(r,c);const m=o*B(h(u)),y=o*G(h(u));e.lineTo(r+m,c+y),t.x=r+m,t.y=c+y,e.stroke()},"-"(){t&&(t.deg+=25+s(-5,5))},"+"(){t&&(t.deg-=25+s(-5,5))},"["(){t&&d.push({...structuredClone(t),opacity:t.opacity*.7})},"]"(){t=d.pop()}}}).create(a.iteration)}const M=k({__name:"fractal-tree",setup(e){const a=w({length:5,factor:.5,startAngle:25,color:"#cf1051",iteration:{_:!0,min:4,max:10,value:6,step:1},redraw:()=>f()}),l=F(s=>{C(s);const p=a.value;return b(s,p)});l.emitter.on("done",()=>{console.log("done")});async function f(){l.recreate()}return(s,p)=>(x(),A(v,{title:"Fractal Tree"},{default:S(()=>[T("div",{ref:V(l).ctx.ref,class:"w-full h-full"},null,512)]),_:1}))}});export{M as default};
